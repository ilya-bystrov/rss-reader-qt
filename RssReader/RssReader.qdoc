\title QML RSS Reader example 

The RSS Reader Example Application demonstrates the use of RSS feed resources on 
the net. It contains a rich UI with view navigation, search, accordion list and 
animations. The UI components are designed to be reusable in other applications. 
RSS Reader uses the QML local storage to store the feeds that the user has 
subscribed. The application also demonstrates how the graphical theme can be 
switched from the settings view.

\image reader1.png

\section1 Design approach

Target was to keep the UI flow simple. The views appear to user as if they were 
laid out horizontally next to each other, so that user can easily keep track of 
where he/she is currently located in the application. Horizontal layout also 
allows simple implementation for sliding left and right between views. Most 
views contain a list view, so the overall look was easy to keep consistent. 
Every view consists of two main elements: a header and a container. 
Additionally, a footer is shown in some of the views.

Landscape mode doesn't differ much from the portrait mode. Header, container and 
the elements inside them get scaled according to the screen dimensions. Footer 
gets embedded inside the header in the views, on which the footer is shown.

\section1 UI navigation

Default direction of navigation is to the right towards more detailed data in 
hierarchy: feeds \-> feed articles \-> feed article details. Back button takes 
user to the previous view. UI is laid out in 4 views from left to right
 
\section1 Theming

Even though QML is cross platform, some visual adjustments are needed for 
different target platforms. These are defined in a special visual.qml file. The 
project file RssReader.pro exports the qml source files along with the correct 
visual.qml so that the resulting qml file set is suitable for the current 
platform.

\section1 Application data and storage

The application stores data in AccordionListModel (AccordionListModel.qml). It 
contains feed categories and subscribed feeds in each category. The model is 
saved to permanent storage upon exit, and restored on application start. 
AccordionListModel uses JavaScript in Store.js for storing and restoring 
contents into a local database storage. List model entries are easily converted 
to and from JSON strings, so JSON format is used for saving.

In discovery view (DiscoveryView.qml, DiscoveryViewModel.qml), new feeds can be 
subscribed from a fixed set. These are defined in the local file discovery.xml, 
which is in  OPML-format.

\section1 Network usage

Network access is handled by XmlListModel. Feed view (FeedView.qml, 
FeedViewModel.qml) loads the selected feed items from Internet using 
XmlListModel.